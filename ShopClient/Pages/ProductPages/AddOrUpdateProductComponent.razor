@page "/add-product"

<div class="container">
    <h3>Add Product</h3>
    <div class="row">
        <div class="col-md-6">
            <EditForm Model="@MyProduct" OnValidSubmit="SaveProduct">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="card">
                    <div class="card-header">Add Product</div>
                    <div class="card-body">
                        <div>
                            <div class="form-group">
                                <label class="form-label">Name</label>
                                <InputText class="form-control" @bind-Value="MyProduct.Name" />
                            </div>

                            <div class="form-group">
                                <label class="form-label"> Select Category</label>
                                @if (categoryService.AllCategories.Count > 0) {
                                    <InputSelect class="form-select form-control-sm" @bind-Value="@MyProduct.CategoryId">
                                        <option selected>Select Category</option>
                                        @foreach (var category in categoryService.AllCategories) {
                                            <option value="@category.Id">@category.Name</option>
                                        }
                                    </InputSelect>
                                }
                            </div>



                            <div class="form-group mt-3">
                                <label class="form-label">Price</label>
                                <InputNumber class="form-control" @bind-Value="MyProduct.Price" />
                            </div>
                            <div class="form-group mt-3">
                                <label class="form-label">Amount</label>
                                <InputNumber class="form-control" @bind-Value="MyProduct.Amount" />
                            </div>
                            <div class="form-group mt-3">
                                <label class="form-label">Description</label>
                                <InputTextArea class="form-control" @bind-Value="MyProduct.Description" />
                            </div>
                            <div class="form-group mt-3">
                                <label class="form-label @(ImageUploadMessage == "" ? "" : "text-danger")">
                                    @(ImageUploadMessage == "" ? "Upload Image (Max 5MB)" : ImageUploadMessage)
                                </label>
                                <InputFile class="form-control" OnChange="UploadImage"></InputFile>
                            </div>
                        </div>
                    </div>
                    @if (IsSaving) {
                        <BusyButtonComponent ShowBusyButton="IsSaving"></BusyButtonComponent>
                    } else {
                        <div class="card-footer">
                            <button type="submit" class="btn btn-outline-primary">
                                <i class="fa fa-plus"></i> Add
                            </button>
                        </div>
                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>
<MessageDialog @ref="messageDialog"></MessageDialog>
@code {
    MessageDialog? messageDialog;
    Product MyProduct = new();
    bool IsSaving = false;
    string ImageUploadMessage = "";
    const int maxFileSize = 1024 * 1024 * 5; // 5MB




    protected async override Task OnInitializedAsync() {
        await categoryService.GetAndCacheCategories();
    }



    async Task UploadImage(InputFileChangeEventArgs e) {
        var file = e.File;
        // make sure file is a valid image format
        if (!file.ContentType.StartsWith("image/")) {
            ImageUploadMessage = "Invalid Image Format";
            return;
        }
        // get the image format (e.g., png, jpg, etc.)
        var format = file.ContentType.Split('/')[1];
        // convert image file to base 64 string
        if (file.Size>maxFileSize){
            ImageUploadMessage = "File too large (Max 5MB)";
            return;
        }

        var buffer = new byte[file.Size];
        ImageUploadMessage = $"Uploading Image...";


        await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
        MyProduct.Base64Img = $"data:image/{format};base64,{Convert.ToBase64String(buffer)}";
        ImageUploadMessage = $"{format} image added";
    }

    async Task SaveProduct() {
        IsSaving = true;
        if (string.IsNullOrEmpty(MyProduct.Base64Img)) {
            messageDialog!.SetDialogValues("warning", "Please upload an image");
            ShowMessageDialog();
            return;
        }
        ServiceResponse response = await productService.AddProduct(MyProduct);
        messageDialog!.SetDialogValues(response.IsSuccess?"Success":"Fail", response.Message); 
        ShowMessageDialog();
        IsSaving = false;
    }
    private async void ShowMessageDialog() {
        await messageDialog!.ShowMessage();
        StateHasChanged();
        IsSaving = false;
    }



}
